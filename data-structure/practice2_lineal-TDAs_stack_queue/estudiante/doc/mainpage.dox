Skip to content
Search or jump to…
Pulls
Issues
Marketplace
Explore
 
@FerniCuesta 
FerniCuesta
/
ED
Private
Code
Issues
Pull requests
Actions
Projects
Security
Insights
Settings
ED/practica_2/estudiante/doc/mainpage.dox
@Antoniogm03
Antoniogm03 Update mainpage.dox
Latest commit bc643a0 23 hours ago
 History
 2 contributors
@FerniCuesta@Antoniogm03

/*! \mainpage Práctica 2 - TDAs Lineales. Pilas y Colas

# Introducción

Hay dos formas de acceder a los datos: una forma es la política LIFO (Last Input, First Output), el último valor en entrar es el primero en salir; y otra forma es la politica FIFO (First Input, First Output) en la que el el primer elemento en entrar es el primero en salir.
El objetivo de esta practica es implementar una estructura de tipo LIFO con una estructura de tipo FIFO y viceversa.

## Cola
Cuando estamos utilizando una política FIFO, las inserciones se realizan por el back que es la última posición de la estructura, mientras que las extracciones se realizan por el front, que es la primera posición.

@image html cola.png "Figura 1"

Una estructura de tipo cola debe contar con los siguientes métodos:\n
- Un método para colocar un elemento al final de la cola\n
- Un método de consulta del último elemento\n
- Un método para extraer el primer elemento de la cola\n
- Un método que nos diga el tamaño de la cola\n
- Un método que nos diga si la cola esta vacía\n


## Pila
Cuando estamos utilizando una pila, las inserciones y las extracciones se realizan por el mismo lado, el top. Por este motivo podemos entender una pila como una estructura vertical.

@image html pila.png "Figura 2"

Una pila deberá contar con los siguientes métodos:\n
- Un método para insertar un elemento en la pila\n
- Un método para consultar el ultimo elemento de la pila\n
- Un método para extraer el primer elemento de la pila\n
- Un método que nos diga el tamaño de la pila\n
- Un método que nos diga si la pila esta vacía\n

# Ejecutables

## TDA MaxStack
Buscamos implementar una pila utilizando como contenedor subyacente una cola.
El ejecutable realiza tantas iteraciones como argumentos le hemos proporcionado en la línea de comandos.
El argumento solo puede ser de dos tipos: un número entero (tanto positivo como negativo) o el caracter '.'. Según sea uno u otro realizaremos una acción distinta:


> __pila_max__ \<arg\>
	
@param <arg> -si el argumento es numérico, lo inserta en la pila\n
			 -si el argumento es un ".", saca de la pila un elemento 

## TDA MaxQueue
En este caso queremos implementar una cola utilizando como contenedor subyacente una pila. La forma de trabajar el ejecutable es la misma que en "cola_max". Se realizan tantas iteraciones como argumentos le hemos proporcionado en la línea de comandos al ejecutable.
Igual que antes, el argumento solo puede ser de dos tipos: un número entero (tanto positivo como negativo) o el caracter '.'. Según sea uno u otro realizaremos una acción distinta:

> __cola_max__ \<arg\>

@param <arg> -si el argumento es numérico, lo inserta en la cola\n
			 -si el argumento es un ".", saca de la cola un elemento 
*/
Footer
© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
ED/mainpage.dox at main · FerniCuesta/ED
