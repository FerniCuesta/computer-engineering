/*! \mainpage Práctica 3: Contenedores no lineales

# Introducción

Esta práctica se basa en el popular juego de television "cifras y letras", para esta sesión nos vamos a centrar en la prueba de las letras.
Esta prueba consiste en formar la mejor palabra posible a partir de un conjunto de letras que son extraídas al azar de una bolsa.
Por ejemplo: con el conjunto O D Y R M E T podemos formar METRO.\n
Existen dos modalidades de juego:\n

-Juego a longitud, en el que solo se tiene en cuentra la longitud de las palabras y gana la palabra mas larga.\n
-Juego a puntos, en el que se le asigna a cada letra una puntuacion distinta y la suma de la puntuacion de cada letra es la que da el valor a la palabra.\n

## Información sobre las letras
Como viene explicado anteriormente, un juego es el de longitud. Para este juego vamos a almacenar la puntuación  y el número de repeticiones disponible de las letras en una estructura de datos
llamada Conjunto de Letras (TDA LettersSet), el número de repeticiones se almacena ya que se puede repetir muchas veces la misma letra, lo que haría muy complicado formar una palabra.
El valor de las repeticiones y la puntuación lo leeremos del fichero letras.txt y la extracción aleatoria se hará utilizando el TDA Bolsa de Letras (TDA LettersBag).

@image html letras.png "Figura 1: Fichero letras.txt" 



## Información sobre las palabras
No todas las palabras estarán permitidas para este juego, por ejemplo, utilizando el caso anterior, una palabra puede ser METROYD, pero esta no puede ser una ya que no pertenece al español.
Para esto tendremos que utilizar un diccionario que contendrá las palabras válidas para nuestro juego.\n
Para la recopilación de estas palabras usamos un fichero diccionario.txt.

@image html diccionario.png "Figura 2"

La estructura de datos en la que vamos a almacenar estas palabras sera el TDA Dictionary.

Debido al tipo de información con la que vamos a trabajar tenemos que usar contenedores no lineales.
Estos contenedores no lineales son TDAs que permiten almacenar pares de información que contienen una clave y un valor asociado.
Las operaciones mas frecuentes son:\n
    - Añadir un par a la colección.\n
    - Eliminar un par de la colección.\n
    - Modificar un par existente.\n
    - Buscar un valor asociado con una determinada clave.\n

Para esto vamos a utilizar las estructuras Set y Map.

## Set
Esta clase representa un conjunto de elementos que se disponen de manera ordeanda en el que no se repiten elementos.
El valor es siempre nulo y los datos que insertamos en el set son llamados claves.
Este método de inserción funcionaría de la siguiente manera:

@image html set1.png "Figura 1"

El set se inicializa vacío.

@image html set2.png "Figura 2"

Hacemos por primera vez la inserción del valor 3, que quedaría asi la clase.

@image html set3.png "Figura 3"

Ahora insertamos el valor 5 en la clase.

@image html set4.png "Figura 4"

Ahora insertamos el valor 3. Como este ya está dentro del contenedor, no se introduce para que no se repita.

@image html set5.png "Figura 5"

Finalmente insertamos el valor 1 que se pone al principio del contenedor ya que es el valor menor.
La estructura de tipo se debe contar como mínimo con los siguientes métodos par que funcione correctamente:\n
    - Tamaño: size()\n
    - Vacío: empty()\n
    - Borrar: erase()\n
    - Vaciar: clear()\n
    - Insertar: insert()\n
    - Buscar: find()\n
    - Iterador inicio: begin()\n
    - Iterador fin: end()\n

## Map
Un map está formado por parejas de valores: Al primero se le conoce como clave, y al segundo como valor asociado a la clave.
Esta clase no permite valores de clave repetidos y ordena según su clave. Con la clave se puede acceder directamente al valor asociado
pero no al contrario.\n
Un ejemplo de inserción sería el siguiente:

@image html map1.png "Figura 1"

Primero insertamos la primera pareja con clave 1 y valor asociado 25

@image html map2.png "Figura 2"

Después insertamos la segunda pareja con clave 2 y valor asociado 37

@image html map3.png "Figura 3"

En la tercera inserción introducimos la pareja con clave 4 y valor asociado 74

@image html map4.png "Figura 4"

Finalmente añadimos la última pareja con clave 5 y valor asociado 25

Como podemos ver, el valor asocidao a la clave se puede repetir ya que están asociados a claves distintas.
Para acceder a 25 se puede acceder con clave-1 o con clave-5.

Para el correcto funcionamiento de map debe de tener como mínimo los siguientes métodos:\n
    - Tamaño: size()\n
    - Vacío: empty()\n
    - Borrar: erase()\n
    - Vaciar: clear()\n
    - Insertar: insert()\n
    - Buscar: find()\n
    - Iterador inicio: begin()\n
    - Iterador fin: end()\n
    - Obtención de valor dada una clave: operator[]\n

## Iteradores
Los iteradores son un T.D.A que nos permite acceder a los elementos de distintos contenedores de forma secuencial.
Para trabajar con iteradores hay que seguir los siguientes pasos:\n
    1. Iniciar el iterador a la primera posición del contenedor (función begin()).\n
    2. Acceder al elemento que apunta (*it, donde it es de tipo iterador)\n
    3. Avanzar el iterador al siguiente elemento del contenedor (++it)\n
    4. Saber cuando hemos recorrido todos los elementos del contenedor (función end())

# Ejecutables

## TDA LettersSet
 Estructura de datos que nos permite almacenar la información de un conjunto de letras,
 las cuales necesitaremos en una partida de las letras. 

> __conjunto_letras__ \<arg1\ \<arg2\>
@param arg1 Ruta al archivo con información sobre el conjunto de letras,
@param arg2 Palabra de la que calcular la puntuación.

E imprimirá por pantalla la puntuación de dicha palabra.

## TDA Bag
Este TDA funciona como una bolsa de caracters. Es una colección que contiene caracteres
y nos permite extraerlos aleatoriamente y sin reemplazarlos.

> __bolsa__ \<arg1\ \<arg2\>
@param arg1 Puede ser una letra C o una letra I. Dependiendo de que letra sea trabjaremos
como una bolsa de caracteres (C) o una de enteros (I).
@param arg2 Este argumento será una lista de enteros o caracteres, que deberán meterse todos en la bolsa,
y después ser extraídos aleatoriamente hasta que la bolsa quede vacía

## TDA LettersBag
Este TDA nos permite seleccionar las letras con las que vamos a poder jugar una partida de las letras.
Es capaz de interpretar la información contenida en un LettersSet y crear una bolsa asociada que tenga
tantas letras como hay en el LettersSet, con las repeticiones adecuadas. Además, una vez construida la bolsa de letras,
queremos poder extraer letras aleatorias de la misma. Para determinar la letra tenemos que construir una bolsa y extraer 
aleatoriamente un número aleatorio de letras.

> __bolsa_letras__ \<arg1\>
@param arg1 Fichero que contiene el conjunto de letras de LettersSet

## TDA Dictionary
Este TDA nos permitirá mantener en nuestro programa un conjunto de palabras. Como no estaremos interesados en
almacenar las definiciones de nuestras palabras, sólo los términos, necesitaremos una estructura que nos
permita almacenar strings. Además, nos interesa que nuestro conjunto tenga las siguientes dos propiedades:\n
    1. Los elementos tienen que estar ordenados alfabéticamente.\n
    2. Los elementos no se deben repetir.

> __palabras_longitud__ \<arg1\ \<arg2\>
    @param arg1 un fichero con las palabras de un diccionario
    @param arg2 un entero con la longitud de las palabras que buscamos

> __cantidad_letras__ \<arg1\ \<arg2\>
    @param arg1 un fichero con las palabras de un diccionario
    @param arg2 un fichero de letras
*/